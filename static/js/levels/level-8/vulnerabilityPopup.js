let vulnerabilityPopupVisible = false;
let popupMinimized = false;
let dragState = { isDragging: false, startX: 0, startY: 0, initialX: 0, initialY: 0 };
let resizeState = { isResizing: false, startX: 0, startY: 0, initialWidth: 0, initialHeight: 0 };

export function initializeVulnerabilityPopup() {
    const popup = document.getElementById('vulnerability-popup');
    const header = document.getElementById('popup-header');
    const minimizeBtn = document.getElementById('minimize-popup');
    const closeBtn = document.getElementById('close-popup');
    const resizeHandle = document.getElementById('resize-handle');
    const minimizedIndicator = document.getElementById('minimized-indicator');

    // Close popup
    closeBtn?.addEventListener('click', () => {
        closeVulnerabilityPopup();
    });

    // Minimize popup
    minimizeBtn?.addEventListener('click', () => {
        minimizeVulnerabilityPopup();
    });

    // Restore from minimized state
    minimizedIndicator?.addEventListener('click', () => {
        restoreVulnerabilityPopup();
    });

    // Drag functionality
    header?.addEventListener('mousedown', startDrag);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);

    // Resize functionality
    resizeHandle?.addEventListener('mousedown', startResize);
    document.addEventListener('mousemove', resize);
    document.addEventListener('mouseup', stopResize);

    // Set initial position
    if (popup) {
        popup.style.top = '20%';
        popup.style.right = '5%';
        popup.style.width = '500px';
        popup.style.height = 'auto';
    }
}

export function showVulnerabilityPopup() {
    const popup = document.getElementById('vulnerability-popup');
    if (popup) {
        popup.classList.remove('hidden');
        vulnerabilityPopupVisible = true;
        
        // Add entrance animation
        popup.style.opacity = '0';
        popup.style.transform = 'scale(0.9)';
        popup.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        
        setTimeout(() => {
            popup.style.opacity = '1';
            popup.style.transform = 'scale(1)';
        }, 10);
    }
}

export function closeVulnerabilityPopup() {
    const popup = document.getElementById('vulnerability-popup');
    const minimizedIndicator = document.getElementById('minimized-indicator');
    
    if (popup) {
        popup.style.opacity = '0';
        popup.style.transform = 'scale(0.9)';
        
        setTimeout(() => {
            popup.classList.add('hidden');
            vulnerabilityPopupVisible = false;
            popupMinimized = false;
        }, 300);
    }
    
    if (minimizedIndicator) {
        minimizedIndicator.classList.add('hidden');
    }
}

export function minimizeVulnerabilityPopup() {
    const popup = document.getElementById('vulnerability-popup');
    const minimizedIndicator = document.getElementById('minimized-indicator');
    
    if (popup && minimizedIndicator) {
        popup.style.opacity = '0';
        popup.style.transform = 'scale(0.9)';
        
        setTimeout(() => {
            popup.classList.add('hidden');
            minimizedIndicator.classList.remove('hidden');
            popupMinimized = true;
        }, 300);
    }
}

export function restoreVulnerabilityPopup() {
    const popup = document.getElementById('vulnerability-popup');
    const minimizedIndicator = document.getElementById('minimized-indicator');
    
    if (popup && minimizedIndicator) {
        minimizedIndicator.classList.add('hidden');
        popup.classList.remove('hidden');
        
        popup.style.opacity = '0';
        popup.style.transform = 'scale(0.9)';
        
        setTimeout(() => {
            popup.style.opacity = '1';
            popup.style.transform = 'scale(1)';
            popupMinimized = false;
        }, 10);
    }
}

export function updateVulnerabilityDisplay(file) {
    const vulnList = document.getElementById('vulnerability-list');
    const vulnCountBadge = document.getElementById('vuln-count-badge');
    
    vulnList.innerHTML = file.vulnerabilities.map(vuln => `
        <div class="bg-slate-700/50 border border-red-500/30 rounded-lg p-3 hover:bg-slate-700 transition-colors">
            <div class="flex items-start gap-3">
                <i class="bi bi-bug-fill text-red-400 text-lg mt-1 flex-shrink-0"></i>
                <div class="flex-1 min-w-0">
                    <div class="flex justify-between items-start mb-2">
                        <h5 class="font-semibold text-red-300 truncate">${vuln.type}</h5>
                        <span class="text-xs px-2 py-1 bg-red-600 text-white rounded flex-shrink-0 ml-2">${vuln.severity}</span>
                    </div>
                    <p class="text-red-200 text-sm mb-2 leading-relaxed">${vuln.description}</p>
                    <div class="text-xs text-slate-400 mb-2">Line ${vuln.line} in ${file.name}</div>
                    
                    <div class="bg-black/30 rounded p-2 mb-3">
                        <div class="text-xs text-yellow-400 mb-1">Exploit Example:</div>
                        <div class="text-green-400 font-mono text-xs break-all">${vuln.exploit}</div>
                    </div>
                    
                    <div class="text-orange-300 text-sm">
                        <span class="font-medium">Impact:</span> ${vuln.impact}
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    
    // Update badge count
    if (vulnCountBadge) {
        vulnCountBadge.textContent = file.vulnerabilities.length;
    }
}

// Drag functionality
function startDrag(e) {
    if (e.target.closest('#minimize-popup') || e.target.closest('#close-popup')) return;
    
    dragState.isDragging = true;
    const popup = document.getElementById('vulnerability-popup');
    const rect = popup.getBoundingClientRect();
    
    dragState.startX = e.clientX;
    dragState.startY = e.clientY;
    dragState.initialX = rect.left;
    dragState.initialY = rect.top;
    
    popup.style.transition = 'none';
    e.preventDefault();
}

function drag(e) {
    if (!dragState.isDragging) return;
    
    const popup = document.getElementById('vulnerability-popup');
    const deltaX = e.clientX - dragState.startX;
    const deltaY = e.clientY - dragState.startY;
    
    const newX = Math.max(0, Math.min(window.innerWidth - popup.offsetWidth, dragState.initialX + deltaX));
    const newY = Math.max(0, Math.min(window.innerHeight - popup.offsetHeight, dragState.initialY + deltaY));
    
    popup.style.left = newX + 'px';
    popup.style.top = newY + 'px';
    popup.style.right = 'auto';
}

function stopDrag() {
    if (dragState.isDragging) {
        const popup = document.getElementById('vulnerability-popup');
        popup.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
        dragState.isDragging = false;
    }
}

// Resize functionality
function startResize(e) {
    resizeState.isResizing = true;
    const popup = document.getElementById('vulnerability-popup');
    const rect = popup.getBoundingClientRect();
    
    resizeState.startX = e.clientX;
    resizeState.startY = e.clientY;
    resizeState.initialWidth = rect.width;
    resizeState.initialHeight = rect.height;
    
    e.preventDefault();
}

function resize(e) {
    if (!resizeState.isResizing) return;
    
    const popup = document.getElementById('vulnerability-popup');
    const deltaX = e.clientX - resizeState.startX;
    const deltaY = e.clientY - resizeState.startY;
    
    const newWidth = Math.max(300, resizeState.initialWidth + deltaX);
    const newHeight = Math.max(200, resizeState.initialHeight + deltaY);
    
    popup.style.width = newWidth + 'px';
    popup.style.height = newHeight + 'px';
}

function stopResize() {
    resizeState.isResizing = false;
}

// Check if popup is currently visible
export function isPopupVisible() {
    return vulnerabilityPopupVisible && !popupMinimized;
}

// Check if popup is minimized
export function isPopupMinimized() {
    return popupMinimized;
}
